package ch06_OOP1;

//      ※※※※※※※※대순서1:  클래스 작성※※※※※※※※
//      Tv의 설계도
//      class Tv {
//          String color;
//          boolean power;
//          int channel;
//
//          void power() {
//              power = !power;
//          }
//          void channelUp() {
//              channel++;
//          }
//          void channelDown() {
//              channel--;
//          }
//      }

public class _02_ClassAndInstance2 {
    public static void main(String[] args) {


//      ※※※※※※※※※※※※※대순서2: 객체 생성※※※※※※※※※※※※※
//      참조변수는 리모콘과 같다.
//      TV 객체를 생성하는 장면을 다시 반복해서 작성하되, 작성할 때마다 의미를 곱씹어보자.

        Tv t;
//      Java 에서는 객체를 사용하려면 "참조변수"가 있어야 한다.
//      Tv 타입을 가지는 인스턴스의 참조변수로 t를 선언한 모습이다.
//      이렇게 기본형 타입이 아닌 타입들을 "참조형 타입"이라고 한다.
//
        t = new Tv();
//      new Tv(); 라는 부분은 new 키워드를 사용해서 객체를 실제로 생성하는 부분이다.
//      여기서 't = '를 통해 참조변수 t에 객체를 할당해주는 것이다.
//      이렇게 객체를 생성하면 이제 진짜로 객체가 메모리에 할당된다.
//      참조변수 t에는 객체 자체가 할당되는 것이 아니라, 바로 이 메모
//      여기서 new 키워드가 하는 일은 두 가지다:
//      1) 객체를 생성한다.
//      2) 생성된 객체가 저장된 메모리 주소가 어딘지 확인하고 그 메모리 주소를 참조변수 t에 대입해준다.
//      즉, new 가 하는 일은 리모콘과 Tv를 연결해주는 거라고 생각해주면 된다.



//      ※※※※※※※※※※※대순서3: 객체의 사용※※※※※※※※※※※※
        t.channel = 7;      // 참조변수 t가 가리키는 객체의 channel 필드에 7을 저장
        t.channelDown();    // 참조변수 t가 가리키는 객체의 channelDown() 이란 메서드를 호출

//      이 t가 가진 인스턴스는 Tv 클래스의 객체이기 때문에 구성요소(멤버)를 총 6개 갖고 있다.
//      필드 3개(멤버변수), 메서드 3개

        Tv t1 = new Tv(); //        t1: 리모콘1    new Tv(): 인스턴스1
        Tv t2 = new Tv(); //        t2: 리모콘2    new Tv(): 인스턴스2
//      이렇게 생성된 인스턴스1과 인스턴스2는 메모리 공간이 서로 다름

        t1.channel = 7;
        t.channelUp();



//      * 참고:
//      인스턴스1과 인스턴스2의 멤버변수의 값이 모두 같다면 둘은 동일한 객체인가? --> No
//      인스턴스가 생성될 때 고유한 해쉬코드를 받게 되는데 이 코드가 서로 다르다.
//      또, 인스턴스가 생성될 때 특정 메모리 주소를 할당받게 되는데 그 메모리의 주소도 서로 다르다.


//      * 가비지 컬렉터
//      여기서 만약 t2 = t1; 이렇게 써버리면 어떻게 될까?
//      이렇게 해버리면 t2가 t1에 있는 주소값을 베껴와서 저장하게 되고, t2가 유지하고 있던 객체와의 관계가 끊어져버리게 된다.
//      t2는 이제 t1이 가리키는 주소와 같은 주소를 갖게 되어버린다.
//      즉 인스턴스1이 리모콘을 2개 갖게 되고, 인스턴스2는 리모콘을 잃어버리게 되는 상황이 된 것이다.
//      참조변수가 없으면 객체를 사용할 수 없기 때문에 인스턴스2는 사용불가가 되버린다.
//      이렇게 사용불가 판정을 받은 객체들은 GC, 즉 가비지 컬렉터로 가게 된다.

//      가비지 컬렉터는 원래부터 주기적으로 메모리를 확인하고 있다가, 참조변수가 없는 객체를 메모리에서 제거해버린다.
//      그렇게 함으로써 불필요하게 메모리가 낭비되지 않게 해준다.
//      그런데 이 경우와 반대로, 하나의 리모콘이 여러 개의 객체를 가리킬 수는 있을까?
//      특정 객체 타입의 배열을 사용한다는 의미라면 가능하지만,
//      하나의 변수에는 하나의 주소값만 저장할 수 있기 때문에, 하나의 참조변수에 여러 타입의 객체를 대입시키는 건 불가능하다.
    }
}
