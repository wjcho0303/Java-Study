package ch06_OOP1;

// 객체지향 프로그래밍의 특징은 네 글자로 기억하자: 캡 상 추 다
// 캡슐화     상속     추상화     다형성

// 클래스의 정의: 객체를 정의해 놓은 것. 객체의 설계도.
// 클래스의 용도: 객체를 생성하는 데에 사용
// 클래스는 제품의 설계도, 객체는 설계도에 따라 만들어진 제품 그 자체

// 객체: 실제로 존재하는 것. 사물 또는 개념
// 객체의 용도: 객체가 갖고 있는 기능과 속성에 따라 다름
// 객체는 속성(변수)과 기능(메서드)로 이루어져 있다.



// 객체와 인스턴스
// 객체: 모든 인스턴스를 대표하는 일반적 용어(실질적일 때도 있고 추상적일 때도 있음)
// 인스턴스: 특정 클래스로부터 실제로 생성된 객체(더 실질적인 느낌)
// 클래스로부터 인스턴스를 생성하는 것을 "인스턴스화" instantiation 라고 부르기도 한다.

// 클래스가 필요한 이유 : 객체를 생성하기 위해
// 객체가 필요한 이유 : 그 객체의 필드와 메서드가 필요하니까



// 클래스를 작성하는 방법
// 일반적으로 하나의 소스 파일에 클래스를 1:1로 만드는 것이 보통이지만, 하나의 소스 파일에 여러 개의 클래스가 작성되는 경우도 있다.
// 그럴 경우에 소스 파일의 이름을 public class 의 이름을 따서 만들어야 한다.
// 예를 들어, public class Hello1 { } class Hello2 { } 이렇게 하나의 파일에 두 개의 클래스가 있을 때,
// 이 소스 파일의 파일명은 Hello1.java 가 된다. 왜냐하면 Hello1 클래스에 public 이 붙어있기 때문이다.
// 하나의 소스 파일에는 하나의 public class 만 존재해야 한다.

// 그리고 일반적으로 이러한 public class 에 main 메서드를 작성한다.
// 왜냐하면 IDE 가 main 메서드를 실행시킬 때 소스파일 이름과 main 메서드를 포함하고 있는 class 의 이름을 보고
// main 메서드를 실행시키기 때문이다. 이렇게 해주면 혼란을 방지할 수 있다.
//
// 만약 소스 파일 내용에 public 클래스가 하나도 없다면?
// 즉 class Hello1 { } class Hello2 { } 이렇게 되어 있다면 소스 파일 이름을 두 클래스 중 아무 거나 선택할 수 있다.
// 즉 파일명이 Hello1.java 와 Hello2.java 둘 다 가능하다.
//
// 또, 파일명은 클래스명을 따라 앞글자를 대문자로 해야 한다. 즉, hello1.java 이렇게 파일명을 작성하면 안 된다.
// 물론 클래스명 맨 앞글자를 소문자로 해도 컴파일 에러는 안 난다. 그러나 파일명과 클래스명이 일치하지 않으면
// main 메서드를 실행시키려고 할 때 IDE 가 잘 인식을 못하는 경우가 생긴다. IDE 가 main 메서드를 실행시킬 때
// 클래스명과 파일명을 비교하기 때문이다.
// 그렇기 때문에 가장 일반적으로 권장되는 패턴은 다음과 같다:
//
//       * 파일명 HelloClass.java
//
//       public class HelloClass {
//           public static void main(String[] args) {
//               System.out.println("Hello World!");
//            }
//       }
//
// 위와 같이 파일명과 동일한 클래스명을 public 클래스로 지정하고, 그 public 클래스 안에 main 메서드를 위치시키는 것이다.

class Tv {
    String color;
    boolean power;
    int channel;

    // 위 세 개의 필드를 인스턴스 변수라고 부른다. 아직 "선언"만 된 것이다.
    // 필드에서 값을 할당 받는 것을 "초기화"라고 부르는데, 이러한 초기화는 인스턴스가 생성될 때 일어난다.
    // 참고로, 아직 선언만 되어 있기 때문에 초기값인 null 이나 0도 아니다.
    // 생성자를 통해 객체가 아예 생성되지 않았으므로 아예 존재하지 않기 때문이다.
    // 만약 생성자 메서드에 별도의 초기값을 지정하지 않는다면 객체가 생성될 때 Java 기본형 타입의 경우 초기값이 부여된다.

    //    Java 기본형 타입의 초기값들 :
    //    byte: 0
    //    short: 0
    //    int: 0
    //    long: 0L
    //    float: 0.0f
    //    double: 0.0d
    //    char: '\u0000' (null 문자)
    //    boolean: false

    //    참조형 타입: null (참고로, String 도 참조형 타입이므로 초기값이 null 이다.)

    void power() {
        power = !power;
    }

    void channelUp() {
        channel++;
    }

    void channelDown() {
        channel--;
    }

    // "객체"라는 것은 쉽게 말하면 "인스턴스 변수들과 메소드의 묶음"이다.
    // 이렇게 생각하면 혼란스러움이 대부분 사라진다.

}

public class _01_ClassAndInstance1 {
    public static void main(String[] args) {

    }
}
