package ch13_Thread;

//
//      멀티 쓰레드 환경에선 여러 쓰레드가 자원을 공유하기 때문에 서로가 작업을 하는 데에 영향을 주게 된다.
//      작업이 끝나지 않았는데 다른 쓰레드로부터 작업을 방해벋는 것을 방해하지 위해 필요한 게 동기화(synchronization)이다.
//      즉, 동기화란, 한 쓰레드가 진행중인 작업을 다른 쓰레드가 간섭하지 못하게 막아주는 것이다.

//      동기화는 간섭받지 않아야 할 문장들을 임계 영역으로 설정함으로써 이루어진다.
//      임계 영역이란 다른 쓰레드가 간섭하면 안 되는 문장들을 묶어준 영역이다.
//      이 임계 영역에는 lock(자물쇠)을 얻은 단 하나의 쓰레드만 출입 가능하다. 객체 1개당 lock 을 최대 1개까지만 가진다.
//      코드 상으로는 "synchronized" 라는 키워드를 통해 임계 영역을 설정한다.
//
//      * 메서드 전체를 임계 영역으로 지정할 경우 (중괄호 내부가 임계 영역)
//      public synchronized void calcSum() {
//          ...
//      }
//
//      * 특정한 영역을 임계 영역으로 지정할 경우 (중괄호 내부가 임계 영역)
//      synchronized(객체리모컨) {
//          ...
//      }
//
//      그런데 동기화를 하면 한 번에 한 쓰레드만 사용할 수 있기 때문에 임계 영역에 너무 많은 코드를 집어 넣는 것은 좋지 않다.
//      임계 영역의 코드가 많아질수록 성능이 떨어진다. 그래서 가능하면 메서드 전체를 임계 영역으로 지정하는 위의 방법은
//      좋지 않다.
//



public class _16_1_Synchronization {
}
