package ch13_Thread;

//      프로세스:  "실행 중"인 프로그램. 자원(resource)와 쓰레드로 구성됨.
//                여기서 말하는 자원은 메모리, CPU 등을 의미한다.
//
//      쓰레드:    프로세스(= 실행 중인 프로그램)에서 실제로 작업을 수행하는 것.
//                모든 프로세스는 최소한 하나의 쓰레드를 갖고 있다.
//                실제 작업을 수행하는 게 쓰레드니까 이건 당연한 말이다.
//
//      프로세스는 공장이고, 쓰레드는 일꾼인 셈이다.
//      싱글 쓰레드 프로세스: 쓰레드가 하나인 프로세스. 한 번에 한 작업만 할 수 있다.
//      예를 들어 메신저 프로그램이 싱글 쓰레드라면 파일 전송과 채팅을 동시에 할 수 없다.
//      멀티 쓰레드 프로세스: 쓰레드가 여러 개인 프로세스. 한 번에 여러 작업을 할 수 있다.
//      지금까지 우리가 공부해 온 프로세스는 싱글 쓰레드 프로세스였다.
//
//      실제로 우리가 사용하는 대부분의 프로그램들은 멀티 쓰레드 프로그램이다.
//      작업 관리자 앱을 켜고 [세부 정보] 탭에 가서 우클릭하면 [스레드] 열을 볼 수 있다.
//
//      하나의 새로운 프로세스를 생성하는 것보다 하나의 새로운 쓰레드를 생성하는 것이 더 적은 비용이 든다.
//      물론 무작정 쓰레드를 증가시키는 게 좋은 것은 아니고, 장단점이 있다.
//
//      멀티 쓰레드의 장단점
//      장점:    시스템 자원을 보다 효율적으로 사용할 수 있다. (컴퓨터 성능을 배려)
//              사용자에 대한 응답성(responseness)이 향상된다.
//              작업이 분리되어 코드가 간결해진다.
//
//      단점:    동기화(synchronization)에 주의해야 한다.
//              교착 상태(Deadlock)이 발생하지 않게 주의해야 한다.
//              기아(Starvation) 문제가 발생하지 않게 주의해야 한다.
//              각 쓰레드가 효율적으로 고르게 실행될 수 있게 해야 한다.
//
//      멀티 쓰레드의 단점은 이렇게 프로그래밍할 때 고려해야 할 사항들이 많아진다는 것이다.

//      * 교착상태 Deadlock
//      예를 들어 공장에서 도구는 한정되어 있는데 그 도구를 사용하려는 일꾼이 여러 명이라고 상상해보자. 그런 상황이다.
//      이렇게 멀티 쓰레드에서 발생하는 문제들은 자원을 공유한다는 것 때문에 발생하는 문제들이다.
//      교착상태는 서로가 서로에게 자원을 양보해주길 대기하는 상태이다.
//
//      * 기아 Starvation
//      특정 쓰레드가 실행할 기회를 갖지 못하여 작업이 진행되지 않는 상황을 의미한다.
//
//
//      멀티 쓰레드 프로그램을 만들려면 각 쓰레드가 고르게 작업을 할 수 있도록 코드를 짜야 한다.
//      사실 멀티 쓰레드로 프로그램 짜는 거 자체는 어렵진 않다.
//      효율적으로 돌아가도록 짜는 게 어려운 거지, 쓰레드를 늘리는 거 자체는 어려운 일은 아니다.
//
//
//



public class _01_ProcessAndThread {
}
