package ch07_OOP2;

// 이번에는 super()에 대해서 알아보자.

// 일단 가장 먼저 기억해야 할 것은 : "자손 클래스 생성자에는 반드시 super() 메서드를 호출해야 한다"는 것이다.
// 왜냐하면 조상의 생성자는 물려받지 않기 때문에 조상으로부터 물려받은 멤버는 super() 를 통해 초기화해야 하기 때문이다.

// super()를 한 마디로 표현하면 "조상의 생성자" 라고 할 수 있다.
// 앞서 상속을 공부할 때 "생성자와 초기화 블록 { }은 상속이 안 된다"고 배웠다.
// 물론 상속을 하면 멤버변수라든지 메서드라든지 굳이 쓰지 않아도 자동으로 가져올 수 있어서 좋긴 한데
// 생성자에 적혀 있는 것들이 많을 경우엔 일일히 다 쓰는 건 메모리 낭비이다. 그래서 사용하는 게 super() 부모 생성자이다.

// 다만 super() 메소드를 좀 더 구체적인 기능을 말하자면 다음과 같다 : "조상의 멤버는 조상의 생성자를 호출해서 초기화"
// 이 super() 메소드 덕분에 자손 클래스는 "자신이 생성한 멤버만 초기화해주면 된다"는 편리함을 갖게 된다.

class Point02 {
    int x;
    int y;
    Point02(int x, int y) {
        this.x = x;
        this.y = y;
    }
}

class Point3D02 extends Point02 {
    int z;

    Point3D02(int x, int y, int z) {    // 매개변수는 물려받은 필드의 것까지 다 받아야 한다.
        super(x, y);                    // Point02(x, y); 이렇게 쓰면 에러 난다. 반드시 super() 를 써야 한다.
        this.z = z;                     // 물려받지 않은 필드는 별도로 this. 을 통해 초기화 해주어야 한다.
    }

//  Point3D02(int x, int y, int z) {
//      super.x = x;           // 에러 발생
//      super.y = y;           // 에러 발생
//      this.z = z;
//  }

    //    위와 같이 써도 에러 난다. 반드시 super() 를 써야 한다.
}


    // 그리고 중요한 것 한 가지 더. super()로 자손의 생성자에다가 부모의 생성자를 호출할 때는 반드시
    // this() 메서도가 그랬듯이 생성자 메서드 구현부의 "맨 첫 번째 줄에 써야 한다."
    // 그렇게 하지 않으면 컴파일러가 자동으로 구현부 맨 첫 줄에 super();  <-- 이걸 삽입해버린다.
    // 근데 super() 가 생성자 구현부 맨 첫 줄에 있는 것은 사실 모든 종류의 생성자가 이미 다 그렇게 갖고 있다.
    // 바로 Object class 의 생성자를 호출하고 있었던 것이다.


//    class Point02  "extends Object"  {  <------------- 컴파일러가 자동으로 해주는 일
//
//        int x, y;
//
//        Point02(int x, int y) {
//            "super();"  <--------------------------- 컴파일러가 자동으로 해주는 일
//            this.x = x;
//            this.y = y;
//        }
//
//    }

    //  컴파일러는 위와 같이 생성자 구현부 맨 첫 줄에 super()나 this()가 있다면 그대로 놔두고, 없다면 super()를 추가한다.
    //  그러므로 사실상 부모가 있든 없든 모든 클래스의 모든 생성자는 첫 줄에 다른 생성자를 갖고 있어야 했던 것이다.
    //  자손 클래스의 경우 super() 를 추가해줘야 하는 거고, 부모 클래스의 경우 컴파일러가 자동으로 지금까지 해줬던 거다.
    //  실제로, super() 를 쓰지 않으면 컴파일 에러 메시지 상에 다음과 같은 메시지가 뜬다:
    //  There is no default constructor available in 'ch07_OOP2.Point02'


public class _06_ConstructorSuper {
    public static void main(String[] args) {

    }
}
